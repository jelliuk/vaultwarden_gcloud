version: '3'

services:
  vaultwarden:
    # Standard Bitwarden is very resource-heavy and cannot run on micro cloud instances
    # Vaultwarden is a Rust (mostly) feature-complete implementation of bitwarden
    # https://github.com/dani-garcia/vaultwarden
    image: vaultwarden/server:alpine
    restart: always
    container_name: vaultwarden
    depends_on: 
    - swag
    volumes:
    - ./vaultwarden/data:/data
    - ./vaultwarden/utilities/backup.sh:/backup.sh:ro
    environment:
    - LOG_FILE=/data/log/vaultwarden.log
    - WEBSOCKET_ENABLED=true            # required for websockets
    - SHOW_PASSWORD_HINT=false
    - DOMAIN=https://${DOMAIN}          # DOMAIN is set in .env but doesn't have protocol prefix
    - SMTP_FROM_NAME=Vaultwarden (${DOMAIN})
    - ADMIN_TOKEN                       # Value-less variables are set in .env
    - SIGNUPS_ALLOWED
    - SMTP_HOST
    - SMTP_FROM
    - SMTP_PORT
    - SMTP_SECURITY
    - SMTP_USERNAME
    - SMTP_PASSWORD
    #- YUBICO_CLIENT_ID
    #- YUBICO_SECRET_KEY
    #- YUBICO_SERVER
    - ORG_CREATION_USERS
    - BACKUP
    - BACKUP_DAYS
    - BACKUP_DIR
    - BACKUP_EMAIL_FROM_NAME
    - BACKUP_ENCRYPTION_KEY
    - BACKUP_EMAIL_TO
    - BACKUP_EMAIL_NOTIFY
    - BACKUP_RCLONE_CONF
    - BACKUP_RCLONE_DEST
    - TZ
    command: >
      sh -c 'if [ -n "$BACKUP" ]; 
             then 
               apk --update --no-cache add sqlite
               ln -sf /proc/1/fd/1 /var/log/backup.log &&
               sed -i "/ash \\/backup\\.sh /d" /etc/crontabs/root &&
               echo "$BACKUP_SCHEDULE ash /backup.sh $BACKUP" >> /etc/crontabs/root && 
               crond -d 8; 
             fi &&
             exec /start.sh'

  swag:
    # LinuxServer.io SWAG provides an automatic HTTPS reverse proxy with Let's Encrypt cert provisioning
    # https://docs.linuxserver.io/general/swag
    image: lscr.io/linuxserver/swag:latest
    restart: always
    container_name: swag
    cap_add:
    -  NET_ADMIN
    volumes:
      - ./swag/config:/config
      - ./vaultwarden/data/log/:/config/log/vaultwarden/:ro
    ports:
      - 80:80 # Port 80 is necessary for Let's Encrypt ACME
      - 443:443
      #- 81:81 dashboard - not used currently
    environment:
      - TZ
      - PUID
      - PGID
      - URL=${URL}
      - SUBDOMAINS=wildcard
      - VALIDATION=dns
      - DNSPLUGIN=cloudflare #optional
      - EMAIL=${EMAIL} #optional
      - DOCKER_MODS=linuxserver/mods:swag-auto-reload|linuxserver/mods:swag-cloudflare-real-ip #|linuxserver/mods:swag-dashboard|linuxserver/mods:swag-dbip

  ddns:
    # This provides a ddclient dynamic dns updating cron which is as simple as running it
    # and editing the ddns/config/ddclient.conf file
    # https://github.com/linuxserver/docker-ddclient
    image: lscr.io/linuxserver/ddclient:latest
    restart: always
    container_name: ddns
    depends_on: 
    - vaultwarden
    volumes:
    - ./ddns/config:/config
    environment:
    - PUID
    - PGID
    - TZ

  countryblock:
    # The block script will block any country (defaults to CN and AU)
    # Requires cap_add as listed and privileged because it uses iptables and ipset
    # https://hub.docker.com/_/alpine/
    image: alpine:latest
    restart: always
    container_name: countryblock
    depends_on: 
    - vaultwarden
    volumes:
    - ${PWD}/countryblock/block.sh:/block.sh:ro
    network_mode: "host"
    privileged: true
    cap_add:
    - NET_ADMIN
    - NET_RAW
    environment:
    - COUNTRIES
    - COUNTRYBLOCK_SCHEDULE
    - TZ
    command: >
      sh -c 'apk --update --no-cache add ipset iptables ip6tables wget bash tzdata &&
             ln -sf /proc/1/fd/1 /var/log/block.log &&
             sed -i "/bash \\/block\\.sh update/d" /etc/crontabs/root &&
             echo "$COUNTRYBLOCK_SCHEDULE bash /block.sh update" >> /etc/crontabs/root &&
             crond -d 8 &&
             bash /block.sh start'    

  watchtower:
    # Watchtower will pull down your new image, gracefully shut down your existing container 
    # and restart it with the same options that were used when it was deployed initially
    # https://github.com/containrrr/watchtower
    image: containrrr/watchtower
    restart: always
    container_name: watchtower
    depends_on: 
    - vaultwarden
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    environment:
    - WATCHTOWER_CLEANUP=true
    - WATCHTOWER_SCHEDULE
    - TZ